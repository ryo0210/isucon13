.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Poll 3"
.TH IO::Poll 3 2023-05-26 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
IO::Poll \- Object interface to system poll call
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Poll qw(POLLRDNORM POLLWRNORM POLLIN POLLHUP);
\&
\&    $poll = IO::Poll\->new();
\&
\&    $poll\->mask($input_handle => POLLIN);
\&    $poll\->mask($output_handle => POLLOUT);
\&
\&    $poll\->poll($timeout);
\&
\&    $ev = $poll\->events($input);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Poll\*(C'\fR is a simple interface to the system level poll routine.
.SH METHODS
.IX Header "METHODS"
.IP "mask ( IO [, EVENT_MASK ] )" 4
.IX Item "mask ( IO [, EVENT_MASK ] )"
If EVENT_MASK is given, then, if EVENT_MASK is non-zero, IO is added to the
list of file descriptors and the next call to poll will check for
any event specified in EVENT_MASK. If EVENT_MASK is zero then IO will be
removed from the list of file descriptors.
.Sp
If EVENT_MASK is not given then the return value will be the current
event mask value for IO.
.IP "poll ( [ TIMEOUT ] )" 4
.IX Item "poll ( [ TIMEOUT ] )"
Call the system level poll routine. If TIMEOUT is not specified then the
call will block. Returns the number of handles which had events
happen, or \-1 on error.
.IP "events ( IO )" 4
.IX Item "events ( IO )"
Returns the event mask which represents the events that happened on IO
during the last call to \f(CW\*(C`poll\*(C'\fR.
.IP "remove ( IO )" 4
.IX Item "remove ( IO )"
Remove IO from the list of file descriptors for the next poll.
.IP "handles( [ EVENT_MASK ] )" 4
.IX Item "handles( [ EVENT_MASK ] )"
Returns a list of handles. If EVENT_MASK is not given then a list of all
handles known will be returned. If EVENT_MASK is given then a list
of handles will be returned which had one of the events specified by
EVENT_MASK happen during the last call ti \f(CW\*(C`poll\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBpoll\fR\|(2), IO::Handle, IO::Select
.SH AUTHOR
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs at <https://github.com/Perl/perl5/issues>.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
