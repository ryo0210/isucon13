.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Spec::VMS 3"
.TH File::Spec::VMS 3 2023-05-26 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
File::Spec::VMS \- methods for VMS file specs
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& require File::Spec::VMS; # Done internally by File::Spec if needed
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
See File::Spec::Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.PP
The default behavior is to allow either VMS or Unix syntax on input and to 
return VMS syntax on output unless Unix syntax has been explicitly requested
via the \f(CW\*(C`DECC$FILENAME_UNIX_REPORT\*(C'\fR CRTL feature.
.IP "canonpath (override)" 4
.IX Item "canonpath (override)"
Removes redundant portions of file specifications and returns results
in native syntax unless Unix filename reporting has been enabled.
.IP "catdir (override)" 4
.IX Item "catdir (override)"
Concatenates a list of file specifications, and returns the result as a
native directory specification unless the Unix filename reporting feature
has been enabled.  No check is made for "impossible" cases (e.g. elements
other than the first being absolute filespecs).
.IP "catfile (override)" 4
.IX Item "catfile (override)"
Concatenates a list of directory specifications with a filename specification
to build a path.
.IP "curdir (override)" 4
.IX Item "curdir (override)"
Returns a string representation of the current directory: '[]' or '.'
.IP "devnull (override)" 4
.IX Item "devnull (override)"
Returns a string representation of the null device: '_NLA0:' or '/dev/null'
.IP "rootdir (override)" 4
.IX Item "rootdir (override)"
Returns a string representation of the root directory: 'SYS$DISK:[000000]'
or '/'
.IP "tmpdir (override)" 4
.IX Item "tmpdir (override)"
Returns a string representation of the first writable directory
from the following list or '' if none are writable:
.Sp
.Vb 3
\&    /tmp if C<DECC$FILENAME_UNIX_REPORT> is enabled.
\&    sys$scratch:
\&    $ENV{TMPDIR}
.Ve
.Sp
If running under taint mode, and if \f(CW$ENV\fR{TMPDIR}
is tainted, it is not used.
.IP "updir (override)" 4
.IX Item "updir (override)"
Returns a string representation of the parent directory: '[\-]' or '..'
.IP "case_tolerant (override)" 4
.IX Item "case_tolerant (override)"
VMS file specification syntax is case-tolerant.
.IP "path (override)" 4
.IX Item "path (override)"
Translate logical name DCL$PATH as a searchlist, rather than trying
to \f(CW\*(C`split\*(C'\fR string value of \f(CW$ENV{\*(AqPATH\*(Aq}\fR.
.IP "file_name_is_absolute (override)" 4
.IX Item "file_name_is_absolute (override)"
Checks for VMS directory spec as well as Unix separators.
.IP "splitpath (override)" 4
.IX Item "splitpath (override)"
.Vb 3
\&   ($volume,$directories,$file) = File::Spec\->splitpath( $path );
\&   ($volume,$directories,$file) = File::Spec\->splitpath( $path,
\&                                                         $no_file );
.Ve
.Sp
Passing a true value for \f(CW$no_file\fR indicates that the path being
split only contains directory components, even on systems where you
can usually (when not supporting a foreign syntax) tell the difference
between directories and files at a glance.
.IP "splitdir (override)" 4
.IX Item "splitdir (override)"
Split a directory specification into the components.
.IP "catpath (override)" 4
.IX Item "catpath (override)"
Construct a complete filespec.
.IP "abs2rel (override)" 4
.IX Item "abs2rel (override)"
Attempt to convert an absolute file specification to a relative specification.
.IP "rel2abs (override)" 4
.IX Item "rel2abs (override)"
Return an absolute file specification from a relative one.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2004\-14 by the Perl 5 Porters.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See File::Spec and File::Spec::Unix.  This package overrides the
implementation of these methods, not the semantics.
.PP
An explanation of VMS file specs can be found at
<http://h71000.www7.hp.com/doc/731FINAL/4506/4506pro_014.html#apps_locating_naming_files>.
