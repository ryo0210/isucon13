.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ExtUtils::Mksymlists 3"
.TH ExtUtils::Mksymlists 3 2023-05-26 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
ExtUtils::Mksymlists \- write linker options files for dynamic extension
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&    use ExtUtils::Mksymlists;
\&    Mksymlists(  NAME     => $name ,
\&                 DL_VARS  => [ $var1, $var2, $var3 ],
\&                 DL_FUNCS => { $pkg1 => [ $func1, $func2 ],
\&                               $pkg2 => [ $func3 ] );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR produces files used by the linker under some OSs
during the creation of shared libraries for dynamic extensions.  It is
normally called from a MakeMaker-generated Makefile when the extension
is built.  The linker option file is generated by calling the function
\&\f(CW\*(C`Mksymlists\*(C'\fR, which is exported by default from \f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR.
It takes one argument, a list of key-value pairs, in which the following
keys are recognized:
.IP DLBASE 4
.IX Item "DLBASE"
This item specifies the name by which the linker knows the
extension, which may be different from the name of the
extension itself (for instance, some linkers add an '_' to the
name of the extension).  If it is not specified, it is derived
from the NAME attribute.  It is presently used only by OS2 and Win32.
.IP DL_FUNCS 4
.IX Item "DL_FUNCS"
This is identical to the DL_FUNCS attribute available via MakeMaker,
from which it is usually taken.  Its value is a reference to an
associative array, in which each key is the name of a package, and
each value is an a reference to an array of function names which
should be exported by the extension.  For instance, one might say
\&\f(CW\*(C`DL_FUNCS => { Homer::Iliad => [ qw(trojans greeks) ],
Homer::Odyssey => [ qw(travellers family suitors) ] }\*(C'\fR.  The
function names should be identical to those in the XSUB code;
\&\f(CW\*(C`Mksymlists\*(C'\fR will alter the names written to the linker option
file to match the changes made by \fIxsubpp\fR.  In addition, if
none of the functions in a list begin with the string \fBboot_\fR,
\&\f(CW\*(C`Mksymlists\*(C'\fR will add a bootstrap function for that package,
just as xsubpp does.  (If a \fBboot_<pkg>\fR function is
present in the list, it is passed through unchanged.)  If
DL_FUNCS is not specified, it defaults to the bootstrap
function for the extension specified in NAME.
.IP DL_VARS 4
.IX Item "DL_VARS"
This is identical to the DL_VARS attribute available via MakeMaker,
and, like DL_FUNCS, it is usually specified via MakeMaker.  Its
value is a reference to an array of variable names which should
be exported by the extension.
.IP FILE 4
.IX Item "FILE"
This key can be used to specify the name of the linker option file
(minus the OS-specific extension), if for some reason you do not
want to use the default value, which is the last word of the NAME
attribute (\fIe.g.\fR for \f(CW\*(C`Tk::Canvas\*(C'\fR, FILE defaults to \f(CW\*(C`Canvas\*(C'\fR).
.IP FUNCLIST 4
.IX Item "FUNCLIST"
This provides an alternate means to specify function names to be
exported from the extension.  Its value is a reference to an
array of function names to be exported by the extension.  These
names are passed through unaltered to the linker options file.
Specifying a value for the FUNCLIST attribute suppresses automatic
generation of the bootstrap function for the package. To still create
the bootstrap name you have to specify the package name in the
DL_FUNCS hash:
.Sp
.Vb 3
\&    Mksymlists(  NAME     => $name ,
\&                 FUNCLIST => [ $func1, $func2 ],
\&                 DL_FUNCS => { $pkg => [] } );
.Ve
.IP IMPORTS 4
.IX Item "IMPORTS"
This attribute is used to specify names to be imported into the
extension. It is currently only used by OS/2 and Win32.
.IP NAME 4
.IX Item "NAME"
This gives the name of the extension (\fIe.g.\fR \f(CW\*(C`Tk::Canvas\*(C'\fR) for which
the linker option file will be produced.
.PP
When calling \f(CW\*(C`Mksymlists\*(C'\fR, one should always specify the NAME
attribute.  In most cases, this is all that's necessary.  In
the case of unusual extensions, however, the other attributes
can be used to provide additional information to the linker.
.SH AUTHOR
.IX Header "AUTHOR"
Charles Bailey \fI<bailey@newman.upenn.edu>\fR
.SH REVISION
.IX Header "REVISION"
Last revised 14\-Feb\-1996, for Perl 5.002.
