.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Carton::Doc::Install 3"
.TH Carton::Doc::Install 3 2022-05-07 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Carton::Doc::Install \- Install the dependencies
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  carton install [\-\-deployment] [\-\-cached] [\-\-path=PATH] [\-\-without develop]
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Install the dependencies for your application. This command has two
modes and the behavior is slightly different.
.SS "DEVELOPMENT MODE"
.IX Subsection "DEVELOPMENT MODE"
.IP "carton install" 4
.IX Item "carton install"
If you run \f(CW\*(C`carton install\*(C'\fR without any arguments and if \fIcpanfile\fR
exists, carton will scan dependencies from \fIcpanfile\fR and install
the modules.
.PP
If you run \f(CW\*(C`carton install\*(C'\fR for the first time
(i.e. \fIcpanfile.snapshot\fR does not exist), carton will fetch all the
modules specified, resolve dependencies and install all required
modules from CPAN.
.PP
If \fIcpanfile.snapshot\fR file does exist, carton will still try to install
modules specified or updated in \fIcpanfile\fR, but uses \fIcpanfile.snapshot\fR
for the dependency resolution, and then cascades to CPAN.
.PP
carton will analyze all the dependencies and their version
information, and it is saved into \fIcpanfile.snapshot\fR file. It is important
to add \fIcpanfile.snapshot\fR file into a version controlled repository and
commit the changes as you update your dependencies.
.SS "DEPLOYMENT MODE"
.IX Subsection "DEPLOYMENT MODE"
If you specify the \f(CW\*(C`\-\-deployment\*(C'\fR command line option or the
\&\fIcpanfile.snapshot\fR exists, carton will only use the dependencies
specified in the \fIcpanfile.snapshot\fR instead of resolving
dependencies.
.SH OPTIONS
.IX Header "OPTIONS"
.IP \-\-deployment 4
.IX Item "--deployment"
Force the deployment mode. See "DEPLOYMENT MODE" above.
.IP \-\-cached 4
.IX Item "--cached"
Locate distribution tarballs in \f(CW\*(C`vendor/cache\*(C'\fR rather than fetching
them from CPAN mirrors. This requires you to run \f(CW\*(C`carton bundle\*(C'\fR
prior to the deployment and commit or sync the content of \f(CW\*(C`vendor\*(C'\fR
directory to the other host you run \f(CW\*(C`carton install\*(C'\fR on.
.IP \-\-cpanfile 4
.IX Item "--cpanfile"
Specify the alternate path for cpanfile. By default, \f(CW\*(C`carton install\*(C'\fR
will look for the file \f(CW\*(C`cpanfile\*(C'\fR in the current directory, then
upwards till the root directory, in case the command runs from a sub
directory.
.Sp
Carton assumes the directory where your cpanfile (or altenate path)
exists as a project root directory, and will look for the snapshot file as
well as install directory (\f(CW\*(C`local\*(C'\fR) and \f(CW\*(C`vendor/cache\*(C'\fR relative to it.
.IP \-\-path 4
.IX Item "--path"
Specify the path to install modules to. Defaults to \fIlocal\fR in the
directory relative to where \f(CW\*(C`cpanfile\*(C'\fR is.
.Sp
\&\fBNOTE\fR: this option, as of version 1.0, is not preserved across
multiple runs of \f(CW\*(C`carton install\*(C'\fR or other commands such as \f(CW\*(C`carton
list\*(C'\fR or \f(CW\*(C`carton exec\*(C'\fR. You can choose to set the path in
\&\f(CW\*(C`PERL_CARTON_PATH\*(C'\fR environment variable to persist it across
commands.
.IP \-\-without 4
.IX Item "--without"
By default, \f(CW\*(C`carton install\*(C'\fR will install all the phases for
dependencies, including \f(CW\*(C`develop\*(C'\fR. You can specify phases or features
to exclude, in the comma separated list.
.Sp
.Vb 1
\&  carton install \-\-deployment \-\-without develop
.Ve
.Sp
\&\fBNOTE\fR: \f(CW\*(C`\-\-without\*(C'\fR for the initial installation (without
cpanfile.snapshot) is not supported at this moment.
