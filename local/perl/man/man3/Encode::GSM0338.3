.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Encode::GSM0338 3"
.TH Encode::GSM0338 3 2021-08-21 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Encode::GSM0338 \-\- ETSI GSM 03.38 Encoding
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use Encode qw/encode decode/;
\&  $gsm0338 = encode("gsm0338", $unicode); # loads Encode::GSM0338 implicitly
\&  $unicode = decode("gsm0338", $gsm0338); # ditto
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
GSM0338 is for GSM handsets. Though it shares alphanumerals with ASCII,
control character ranges and other parts are mapped very differently,
mainly to store Greek characters.  There are also escape sequences
(starting with 0x1B) to cover e.g. the Euro sign.
.PP
This was once handled by Encode::Bytes but because of all those
unusual specifications, Encode 2.20 has relocated the support to
this module.
.PP
This module implements only \fIGSM 7 bit Default Alphabet\fR and
\&\fIGSM 7 bit default alphabet extension table\fR according to standard
3GPP TS 23.038 version 16. Therefore \fINational Language Single Shift\fR
and \fINational Language Locking Shift\fR are not implemented nor supported.
.SS Septets
.IX Subsection "Septets"
This modules operates with octets (like any other Encode module) and not
with packed septets (unlike other GSM standards). Therefore for processing
binary SMS or parts of GSM TPDU payload (3GPP TS 23.040) it is needed to do
conversion between octets and packed septets. For this purpose perl's \f(CW\*(C`pack\*(C'\fR
and \f(CW\*(C`unpack\*(C'\fR functions may be useful:
.PP
.Vb 2
\&  $bytes = substr(pack(\*(Aq(b*)*\*(Aq, unpack \*(Aq(A7)*\*(Aq, unpack \*(Aqb*\*(Aq, $septets), 0, $num_of_septets);
\&  $unicode = decode(\*(AqGSM0338\*(Aq, $bytes);
\&
\&  $bytes = encode(\*(AqGSM0338\*(Aq, $unicode);
\&  $septets = pack \*(Aqb*\*(Aq, join \*(Aq\*(Aq, map { substr $_, 0, 7 } unpack \*(Aq(A8)*\*(Aq, unpack \*(Aqb*\*(Aq, $bytes;
\&  $num_of_septets = length $bytes;
.Ve
.PP
Please note that for correct decoding of packed septets it is required to
know number of septets packed in binary buffer as binary buffer is always
padded with zero bits and 7 zero bits represents character \f(CW\*(C`@\*(C'\fR. Number
of septets is also stored in TPDU payload when dealing with 3GPP TS 23.040.
.SH BUGS
.IX Header "BUGS"
Encode::GSM0338 2.7 and older versions (part of Encode 3.06) incorrectly
handled zero bytes (character \f(CW\*(C`@\*(C'\fR). This was fixed in Encode::GSM0338
version 2.8 (part of Encode 3.07).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
3GPP TS 23.038 <https://www.3gpp.org/dynareport/23038.htm>
.PP
ETSI TS 123 038 V16.0.0 (2020\-07) <https://www.etsi.org/deliver/etsi_ts/123000_123099/123038/16.00.00_60/ts_123038v160000p.pdf>
.PP
Encode
