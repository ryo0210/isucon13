.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Digest::file 3"
.TH Digest::file 3 2022-05-28 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Digest::file \- Calculate digests of files
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&  # Poor mans "md5sum" command
\&  use Digest::file qw(digest_file_hex);
\&  for (@ARGV) {
\&      print digest_file_hex($_, "MD5"), "  $_\en";
\&  }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provide 3 convenience functions to calculate the digest
of files.  The following functions are provided:
.ie n .IP "digest_file( $file, $algorithm, [$arg,...] )" 4
.el .IP "digest_file( \f(CW$file\fR, \f(CW$algorithm\fR, [$arg,...] )" 4
.IX Item "digest_file( $file, $algorithm, [$arg,...] )"
This function will calculate and return the binary digest of the bytes
of the given file.  The function will croak if it fails to open or
read the file.
.Sp
The \f(CW$algorithm\fR is a string like "MD2", "MD5", "SHA\-1", "SHA\-512".
Additional arguments are passed to the constructor for the
implementation of the given algorithm.
.ie n .IP "digest_file_hex( $file, $algorithm, [$arg,...] )" 4
.el .IP "digest_file_hex( \f(CW$file\fR, \f(CW$algorithm\fR, [$arg,...] )" 4
.IX Item "digest_file_hex( $file, $algorithm, [$arg,...] )"
Same as \fBdigest_file()\fR, but return the digest in hex form.
.ie n .IP "digest_file_base64( $file, $algorithm, [$arg,...] )" 4
.el .IP "digest_file_base64( \f(CW$file\fR, \f(CW$algorithm\fR, [$arg,...] )" 4
.IX Item "digest_file_base64( $file, $algorithm, [$arg,...] )"
Same as \fBdigest_file()\fR, but return the digest as a base64 encoded
string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Digest
