.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Encode::Alias 3"
.TH Encode::Alias 3 2023-05-26 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Encode::Alias \- alias definitions to encodings
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&  use Encode;
\&  use Encode::Alias;
\&  define_alias( "newName" => ENCODING);
\&  define_alias( qr/.../ => ENCODING);
\&  define_alias( sub { return ENCODING if ...; } );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Allows newName to be used as an alias for ENCODING. ENCODING may be
either the name of an encoding or an encoding object (as described 
in Encode).
.PP
Currently the first argument to \fBdefine_alias()\fR can be specified in the
following ways:
.IP "As a simple string." 4
.IX Item "As a simple string."
.PD 0
.IP "As a qr// compiled regular expression, e.g.:" 4
.IX Item "As a qr// compiled regular expression, e.g.:"
.PD
.Vb 1
\&  define_alias( qr/^iso8859\-(\ed+)$/i => \*(Aq"iso\-8859\-$1"\*(Aq );
.Ve
.Sp
In this case, if \fIENCODING\fR is not a reference, it is \f(CW\*(C`eval\*(C'\fR\-ed
in order to allow \f(CW$1\fR etc. to be substituted.  The example is one
way to alias names as used in X11 fonts to the MIME names for the
iso\-8859\-* family.  Note the double quotes inside the single quotes.
.Sp
(or, you don't have to do this yourself because this example is predefined)
.Sp
If you are using a regex here, you have to use the quotes as shown or
it won't work.  Also note that regex handling is tricky even for the
experienced.  Use this feature with caution.
.IP "As a code reference, e.g.:" 4
.IX Item "As a code reference, e.g.:"
.Vb 1
\&  define_alias( sub {shift =~ /^iso8859\-(\ed+)$/i ? "iso\-8859\-$1" : undef } );
.Ve
.Sp
The same effect as the example above in a different way.  The coderef
takes the alias name as an argument and returns a canonical name on
success or undef if not.  Note the second argument is ignored if provided.
Use this with even more caution than the regex version.
.PP
\fIChanges in code reference aliasing\fR
.IX Subsection "Changes in code reference aliasing"
.PP
As of Encode 1.87, the older form
.PP
.Vb 1
\&  define_alias( sub { return  /^iso8859\-(\ed+)$/i ? "iso\-8859\-$1" : undef } );
.Ve
.PP
no longer works.
.PP
Encode up to 1.86 internally used "local \f(CW$_\fR" to implement this older
form.  But consider the code below;
.PP
.Vb 6
\&  use Encode;
\&  $_ = "eeeee" ;
\&  while (/(e)/g) {
\&    my $utf = decode(\*(Aqaliased\-encoding\-name\*(Aq, $1);
\&    print "position:",pos,"\en";
\&  }
.Ve
.PP
Prior to Encode 1.86 this fails because of "local \f(CW$_\fR".
.SS "Alias overloading"
.IX Subsection "Alias overloading"
You can override predefined aliases by simply applying \fBdefine_alias()\fR.
The new alias is always evaluated first, and when necessary,
\&\fBdefine_alias()\fR flushes the internal cache to make the new definition
available.
.PP
.Vb 2
\&  # redirect SHIFT_JIS to MS/IBM Code Page 932, which is a
\&  # superset of SHIFT_JIS
\&
\&  define_alias( qr/shift.*jis$/i  => \*(Aq"cp932"\*(Aq );
\&  define_alias( qr/sjis$/i        => \*(Aq"cp932"\*(Aq );
.Ve
.PP
If you want to zap all predefined aliases, you can use
.PP
.Vb 1
\&  Encode::Alias\->undef_aliases;
.Ve
.PP
to do so.  And
.PP
.Vb 1
\&  Encode::Alias\->init_aliases;
.Ve
.PP
gets the factory settings back.
.PP
Note that \fBdefine_alias()\fR will not be able to override the canonical name
of encodings. Encodings are first looked up by canonical name before
potential aliases are tried.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode, Encode::Supported
