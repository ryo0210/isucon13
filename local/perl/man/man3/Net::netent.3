.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::netent 3"
.TH Net::netent 3 2019-02-18 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::netent \- by\-name interface to Perl's built\-in getnet*() functions
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& use Net::netent qw(:FIELDS);
\& getnetbyname("loopback")               or die "bad net";
\& printf "%s is %08X\en", $n_name, $n_net;
\&
\& use Net::netent;
\&
\& $n = getnetbyname("loopback")          or die "bad net";
\& { # there\*(Aqs gotta be a better way, eh?
\&     @bytes = unpack("C4", pack("N", $n\->net));
\&     shift @bytes while @bytes && $bytes[0] == 0;
\& }
\& printf "%s is %08X [%d.%d.%d.%d]\en", $n\->name, $n\->net, @bytes;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module's default exports override the core \fBgetnetbyname()\fR and
\&\fBgetnetbyaddr()\fR functions, replacing them with versions that return
"Net::netent" objects.  This object has methods that return the similarly
named structure field name from the C's netent structure from \fInetdb.h\fR;
namely name, aliases, addrtype, and net.  The aliases 
method returns an array reference, the rest scalars.
.PP
You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your core functions.)  Access these fields as variables named
with a preceding \f(CW\*(C`n_\*(C'\fR.  Thus, \f(CW\*(C`$net_obj\->name()\*(C'\fR corresponds to
\&\f(CW$n_name\fR if you import the fields.  Array references are available as
regular array variables, so for example \f(CW\*(C`@{ $net_obj\->aliases()
}\*(C'\fR would be simply \f(CW@n_aliases\fR.
.PP
The \fBgetnet()\fR function is a simple front-end that forwards a numeric
argument to \fBgetnetbyaddr()\fR, and the rest
to \fBgetnetbyname()\fR.
.PP
To access this functionality without the core overrides,
pass the \f(CW\*(C`use\*(C'\fR an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.SH EXAMPLES
.IX Header "EXAMPLES"
The \fBgetnet()\fR functions do this in the Perl core:
.PP
.Vb 1
\&    sv_setiv(sv, (I32)nent\->n_net);
.Ve
.PP
The \fBgethost()\fR functions do this in the Perl core:
.PP
.Vb 1
\&    sv_setpvn(sv, hent\->h_addr, len);
.Ve
.PP
That means that the address comes back in binary for the
host functions, and as a regular perl integer for the net ones.
This seems a bug, but here's how to deal with it:
.PP
.Vb 3
\& use strict;
\& use Socket;
\& use Net::netent;
\&
\& @ARGV = (\*(Aqloopback\*(Aq) unless @ARGV;
\&
\& my($n, $net);
\&
\& for $net ( @ARGV ) {
\&
\&     unless ($n = getnetbyname($net)) {
\&        warn "$0: no such net: $net\en";
\&        next;
\&     }
\&
\&     printf "\en%s is %s%s\en", 
\&            $net, 
\&            lc($n\->name) eq lc($net) ? "" : "*really* ",
\&            $n\->name;
\&
\&     print "\etaliases are ", join(", ", @{$n\->aliases}), "\en"
\&                if @{$n\->aliases};     
\&
\&     # this is stupid; first, why is this not in binary?
\&     # second, why am i going through these convolutions
\&     # to make it looks right
\&     {
\&        my @a = unpack("C4", pack("N", $n\->net));
\&        shift @a while @a && $a[0] == 0;
\&        printf "\etaddr is %s [%d.%d.%d.%d]\en", $n\->net, @a;
\&     }
\&
\&     if ($n = getnetbyaddr($n\->net)) {
\&        if (lc($n\->name) ne lc($net)) {
\&            printf "\etThat addr reverses to net %s!\en", $n\->name;
\&            $net = $n\->name;
\&            redo;
\&        } 
\&     }
\& }
.Ve
.SH NOTE
.IX Header "NOTE"
While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.
.SH AUTHOR
.IX Header "AUTHOR"
Tom Christiansen
