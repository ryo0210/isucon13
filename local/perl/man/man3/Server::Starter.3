.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Server::Starter 3"
.TH Server::Starter 3 2024-10-23 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Server::Starter \- a superdaemon for hot\-deploying server programs
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  # from command line
\&  % start_server \-\-port=80 my_httpd
\&
\&  # in my_httpd
\&  use Server::Starter qw(server_ports);
\&
\&  my $listen_sock = IO::Socket::INET\->new(
\&      Proto => \*(Aqtcp\*(Aq,
\&  );
\&  $listen_sock\->fdopen((values %{server_ports()})[0], \*(Aqw\*(Aq)
\&      or die "failed to bind to listening socket:$!";
\&
\&  while (1) {
\&      if (my $conn = $listen_sock\->accept) {
\&          ....
\&      }
\&  }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
It is often a pain to write a server program that supports graceful restarts, with no resource leaks.  Server::Starter solves the problem by splitting the task into two.  One is start_server, a script provided as a part of the module, which works as a superdaemon that binds to zero or more TCP ports or unix sockets, and repeatedly spawns the server program that actually handles the necessary tasks (for example, responding to incoming connections).  The spawned server programs under Server::Starter call \fBaccept\fR\|(2) and handle the requests.
.PP
To gracefully restart the server program, send SIGHUP to the superdaemon.  The superdaemon spawns a new server program, and if (and only if) it starts up successfully, sends SIGTERM to the old server program.
.PP
By using Server::Starter it is much easier to write a hot-deployable server.  Following are the only requirements a server program to be run under Server::Starter should conform to:
.IP \(bu 4
receive file descriptors to listen to through an environment variable
.IP \(bu 4
perform a graceful shutdown when receiving SIGTERM
.PP
A Net::Server personality that can be run under Server::Starter exists under the name Net::Server::SS::PreFork.
.SH METHODS
.IX Header "METHODS"
.IP server_ports 4
.IX Item "server_ports"
Returns zero or more file descriptors on which the server program should call \fBaccept\fR\|(2) in a hashref.  Each element of the hashref is: (host:port|port|path_of_unix_socket) => file_descriptor.
.IP start_server 4
.IX Item "start_server"
Starts the superdaemon.  Used by the \f(CW\*(C`start_server\*(C'\fR script.
.SH AUTHOR
.IX Header "AUTHOR"
Kazuho Oku
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Server::SS::PreFork
.SH LICENSE
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
