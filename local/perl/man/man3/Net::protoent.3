.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::protoent 3"
.TH Net::protoent 3 2023-05-26 "perl v5.38.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::protoent \- by\-name interface to Perl's built\-in getproto*() functions
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\& use Net::protoent;
\& my $p = getprotobyname(shift || \*(Aqtcp\*(Aq) || die "no proto";
\& printf "proto for %s is %d, aliases are %s\en",
\&    $p\->name, $p\->proto, "@{$p\->aliases}";
\&
\& use Net::protoent qw(:FIELDS);
\& getprotobyname(shift || \*(Aqtcp\*(Aq) || die "no proto";
\& print "proto for $p_name is $p_proto, aliases are @p_aliases\en";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module's default exports override the core \fBgetprotoent()\fR,
\&\fBgetprotobyname()\fR, and \fBgetnetbyport()\fR functions, replacing them with
versions that return "Net::protoent" objects.  They take default
second arguments of "tcp".  This object has methods that return the
similarly named structure field name from the C's protoent structure
from \fInetdb.h\fR; namely name, aliases, and proto.  The aliases method
returns an array reference, the rest scalars.
.PP
You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your core functions.)  Access these fields as variables named
with a preceding \f(CW\*(C`p_\*(C'\fR.  Thus, \f(CW\*(C`$proto_obj\->name()\*(C'\fR corresponds to
\&\f(CW$p_name\fR if you import the fields.  Array references are available as
regular array variables, so for example \f(CW\*(C`@{ $proto_obj\->aliases()
}\*(C'\fR would be simply \f(CW@p_aliases\fR.
.PP
The \fBgetproto()\fR function is a simple front-end that forwards a numeric
argument to \fBgetprotobyport()\fR, and the rest to \fBgetprotobyname()\fR.
.PP
To access this functionality without the core overrides,
pass the \f(CW\*(C`use\*(C'\fR an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.SH NOTE
.IX Header "NOTE"
While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.
.SH AUTHOR
.IX Header "AUTHOR"
Tom Christiansen
